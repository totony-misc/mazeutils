//
// @name Terrain kill
// @author Totony#1224
// @desc
//   This is a terrain kill trigger, which allows certain terrain types to kill units automatically.
//   Variables needed:
//   - udg_tt_killterrain - terrain type that kills
//   - udg_r_killterrain_granularity - offset (0 <= x < 64), allows flexibility in how far one can go into killable terrain
//   - udg_ug_dh - unit group for which this trigger applies
// @note Will probably change a lot (even variable names)
//

function DEB takes string str returns nothing
		//call DisplayTimedTextToForce( GetPlayersAll(), 1.00, str )
endfunction

// Get the terrain type that's at (x,y), adjusted to account for wacky graphics
// e.g., most  tiles are like this in a square
// y <= x + 128 - b    -----   y <= 256 - b - x
//                     |/ \|
//                   b |\ /|
// y >= b - x          -----   y >= x - 128 + b
//                      b
//
// b = 64
//
// Returns 0 if we cannot guess which tile is at point (x,y)
// Rely on diagonal interpolation, to figure out what to do next
function getTileAt takes real x, real y returns integer
	local real relX = ModuloReal(x - 64, 128)
	local real relY = ModuloReal(y - 64, 128)
	local integer terrainType      = GetTerrainType(x, y)
	
	local integer terrainTypeLeft  = GetTerrainType(x - 128, y)
	local integer terrainTypeRight = GetTerrainType(x + 128, y)
	local integer terrainTypeTop   = GetTerrainType(x, y + 128)
	local integer terrainTypeBot   = GetTerrainType(x, y - 128)

	// Check tile bounds (if single tile)
	if relY > relX + 64 then // top left
		// If horizontal/vertical interpolation
		if terrainTypeLeft == terrainType or terrainTypeTop == terrainType then
			return terrainType
		endif
		call DEB("TOP LEFT: (" + R2S(relX) + "," + R2S(relY) + ")")
	elseif relY > 192 - relX then // top right
		if terrainTypeRight == terrainType or terrainTypeTop == terrainType then
			return terrainType
		endif
		call DEB("TOP RIGHT: (" + R2S(relX) + "," + R2S(relY) + ")")
	elseif relY < 64 - relX then // bottom left
		if terrainTypeLeft == terrainType or terrainTypeBot == terrainType then
			return terrainType
		endif
		call DEB("BOTTOM LEFT: (" + R2S(relX) + "," + R2S(relY) + ")")
	elseif relY < relX - 64 then // bottom right
		if terrainTypeRight == terrainType or terrainTypeBot == terrainType then
			return terrainType
		endif
		call DEB("BOTTOM RIGHT: (" + R2S(relX) + "," + R2S(relY) + ")")
	else
		return terrainType
	endif

	// If we are in at a point which is neither interpolated vertically/horizontally, nor is inside the bounds,
	// then it is either interpolated diagonally (other function) or the point is in the diagonal of 2 different tiles,
	// which makes guessing the one displayed very hard since some tiles have priorities over others
	return 0
endfunction

function floor takes real n returns real
	if n < 0 then
		return I2R(R2I(n-1))
	else
		return I2R(R2I(n))
	endif
endfunction

// Returns the tile at (x,y), or 0 if not on the diagonal of 2 identical tiles
// The graphical display might still be a diagonal for some combinations of 2 different tiles,
// but this is not handled and will return 0
//
// Center of tiles are on 128x, 128y
// Maths:
// 
// upward diagonals (on top):      f(x) = x + b + 128i where i>0
// diagonal of current tile:       f(x) = x + b
// upward diagonals (on botton):   f(x) = x + b + 128i where i<0
//
// downward diagonals (on top):    f(x) = -x + b + 128i where i>0
// downward diagonals (on bottom): f(x) = -x + b + 128i where i<0
//
// Point is between those, we want to get the points at both sides of a perpendicular line going through our point to these f(x)s
//
// Additional note:
// You are basically always in 2 diagonals, and JASS makes returning array a pain,
// So you should call this function with upward set to true and false for both diagonals
// args:
//  @upward: if true returns the upward diagonal tile, else the downward
function getDiagonalTileAt takes real x, real y, boolean upward returns integer
	local integer tile1
	local integer tile2

	local real relX = ModuloReal(x - 64, 128)
	local real relY = ModuloReal(y - 64, 128)

	// Here we get the middle current 128x128 square
	local real middleTileX = floor((x+64)/128) * 128
	local real middleTileY = floor((y+64)/128) * 128
	
	local real bUpward   = middleTileY - middleTileX // This is the diagonal passing through the current tile
	local real bDownward = middleTileY + middleTileX // ^

	local integer i

	local real offset

	local real tile1X
	local real tile1Y
	local real tile2X
	local real tile2Y

	call DEB("position: (" + R2S(x) + "," + R2S(y) + ")")
	call DEB("middle of current: (" + R2S(middleTileX) + "," + R2S(middleTileY) + ")")

	if upward then
		// The first upward diagonal that's on top of current point is
		// i = relY > relX ? 1 : 0
		// We want to check that diagonal and the one above
		if relY > relX then // upper quadrant
			set bUpward = bUpward + 128
		endif

		call DEB("bUpward: " + R2S(bUpward))
		
		set i = 0
		loop
			exitwhen i > 1

			// top left tile
			set offset = (x - y + bUpward + 128 * i)/2

			set tile1X = x - offset
			set tile1Y = y + offset

			// right bottom tile
			set offset = 128 - offset

			set tile2X = x + offset
			set tile2Y = y - offset

			call DEB("tile1 (i=" + I2S(i) + "): (" + R2S(tile1X) + "," + R2S(tile1Y) + ")")
			call DEB("tile2 (i=" + I2S(i) + "): (" + R2S(tile2X) + "," + R2S(tile2Y) + ")")

			set tile1 = getTileAt(tile1X, tile1Y)
			set tile2 = getTileAt(tile2X, tile2Y)
			if tile1 != 0 and tile1 == tile2 then
				call DEB("U - found tile " + I2S(tile1))
				return tile1
			endif
			set i = i+1
		endloop
	else
		// Downward diagonal relY = 128 - relX
		//
		// The first downward diagonal that's above the current point is
		// i = relY > 128 - relX ? 1 : 0
		// We want to check that diagonal and the one above
		if relY > 128 - relX then
			set bDownward = bDownward + 128
		endif
		
		call DEB("bDownward: " + R2S(bDownward))

		set i = 0
		loop
			exitwhen i > 1

			// top right tile
			set offset = (-x - y + bDownward + 128 * i)/2

			set tile1X = x + offset
			set tile1Y = y + offset

			// bot left tile
			set offset = 128 - offset

			set tile2X = x - offset
			set tile2Y = y - offset
		
			call DEB("tile1 (i=" + I2S(i) + "): (" + R2S(tile1X) + "," + R2S(tile1Y) + ")")
			call DEB("tile2 (i=" + I2S(i) + "): (" + R2S(tile2X) + "," + R2S(tile2Y) + ")")

			set tile1 = getTileAt(tile1X, tile1Y)
			set tile2 = getTileAt(tile2X, tile2Y)
			if tile1 != 0 and tile1 == tile2 then
				call DEB("D - found tile " + I2S(tile1))
				return tile1
			endif
			set i = i+1
		endloop
	endif

	return 0
endfunction

// Returns true if unit is on tile terrainType
// @arg boolean all:
//   if true, unit must be either on the tile or on both diagonal (if there are 2 diagonals)
//   if false, unit must be on only one diagonal
function isTileAt takes real x, real y, integer terrainType, boolean all returns boolean
	local integer tile = getTileAt(x,y)

	local integer upward
	local integer downward

	if tile == terrainType then
		return true
	elseif tile == 0 then // Only interpolate if there's not tile at current position
		set upward = getDiagonalTileAt(x, y, true)
		set downward = getDiagonalTileAt(x, y, false)

		if all then
			return upward == terrainType and downward == terrainType
		else
			return upward == terrainType or downward == terrainType
		endif
	endif

	return false
endfunction

// Returns true if unit is on tile terrainType (accounting for granularity).
// @arg boolean all:
//   if true, unit must be fully on terrainType
//   if false, unit must be partially on terrainType
// @arg real absGranularity:
//   absolute offset to use
function isTileAtWithGranularity takes real x, real y, integer terrainType, boolean all, real absGranularity returns boolean
	local boolean onTerrain

	local real angle = 45
	local real angleIncrement = 45

	local real adjX
	local real adjY

	if absGranularity == 0 then
		set angle = 360
	endif

	loop
		exitwhen angle > 360
		set adjX = x + absGranularity * Cos(angle * bj_DEGTORAD)
		set adjY = y + absGranularity * Sin(angle * bj_DEGTORAD)
		
		// TODO: You only need to check for diagonal if angle mod 45 = 0 != mod 90?
		set onTerrain = isTileAt(adjX, adjY, terrainType, true)

		if all and not onTerrain then
			return false
		elseif not all and onTerrain then
			return true
		endif
		set angle = angle + angleIncrement
	endloop

	return all
endfunction

// Checks if hero should die
// -64 < granularity < 64
// and represents the number of units the DH is allowed to go into terrain
function TK_Checker takes unit u, integer killTerrainType, real granularity returns boolean
	local real x = GetUnitX(u)
	local real y = GetUnitY(u)

	local boolean relax = granularity >= 0

	// Check if unit is on killTerrainType (horizontal/vertical and diagonal)
	// Diagonal must be checked at the same time as horizontal, since it is a OR rule
	return isTileAtWithGranularity(x, y, killTerrainType, relax, RAbsBJ(granularity))
endfunction

// @uses integer udg_tt_killterrain
// @uses real udg_r_killterrain_granularity
function TK_Iterator takes nothing returns nothing
	if ( TK_Checker(GetEnumUnit(), udg_tt_killterrain, udg_r_killterrain_granularity) ) then
		call KillUnit(GetEnumUnit())
		// we do not need to destroy force since its a built in
		//call DisplayTimedTextToForce( GetPlayersAll(), 1.00, "dead" )
	endif
endfunction

// @uses unitgroup udg_ug_dh
function Trig_Terrain_kill_Actions takes nothing returns nothing
	call ForGroup( udg_ug_dh, function TK_Iterator )
endfunction

//===========================================================================
function InitTrig_Terrain_kill takes nothing returns nothing
	set gg_trg_Terrain_kill = CreateTrigger()
	call TriggerRegisterTimerEventPeriodic( gg_trg_Terrain_kill, 0.10 )
	call TriggerAddAction( gg_trg_Terrain_kill, function Trig_Terrain_kill_Actions )
endfunction
